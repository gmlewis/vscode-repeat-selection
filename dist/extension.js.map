{
  "version": 3,
  "sources": ["../extension.js"],
  "sourcesContent": ["const vscode = require('vscode')\n\n// Maximum length of pasted string (per selection).\nconst MAX_LENGTH = 10000000\n\n/**\n * @param {vscode.ExtensionContext} context\n */\nconst activate = (context) => {\n  console.log('Congratulations, your extension \"repeat-selection\" is now active!')\n\n  const disposable = vscode.commands.registerCommand('repeat-selection.repeatSelection', () => {\n    const opt = {\n      placeHolder: 'default: 1',\n      prompt: 'Input the number of times to paste selected text.',\n    }\n    const input = vscode.window.showInputBox(opt)  // get user input\n    if (!input) {\n      console.log(`Aborting: input='${input}'`)\n      return\n    }\n\n    input.then((val) => {\n      // Convert string to int\n      // console.log(`val=${val}`)\n      const numCopies = parseInt(val, 10) || 1\n      // console.log(`numCopies=${numCopies}`)\n\n      const newPositions = []\n\n      const textEditor = vscode.window.activeTextEditor\n      textEditor.edit((builder) => {\n        textEditor.selections.forEach(selection => {\n          console.log(`GML: selection=${JSON.stringify(selection)}`)\n          // Get selected text\n          const text = textEditor.document.getText(new vscode.Range(selection.start, selection.end))\n          console.log(`text.length=${text.length}: text='${text}'`)\n\n          if ((text.length * numCopies) > MAX_LENGTH) {\n            const msg = 'Final text length exceeds max of ' + MAX_LENGTH.toString() + 'on line ' + selection.start.line + '.'\n            vscode.window.showErrorMessage(msg)\n            return\n          }\n\n          const str = processSelection({ numCopies, text, selection, newPositions })\n\n          // Replace selected text with repeated text\n          builder.replace(selection, str)\n        })\n      })\n\n      const newSelections = []\n      newPositions.forEach((v) => {\n        const cursorPosition = new vscode.Position(v[0], v[1])\n        console.log(`GML: [${v[0]},${v[1]}] => cursorPosition=${JSON.stringify(cursorPosition)}`)\n        const newSelection = new vscode.Selection(cursorPosition, cursorPosition)\n        console.log(`GML: newSelection=${JSON.stringify(newSelection)}`)\n        newSelections.push(newSelection)\n      })\n\n      textEditor.selection = newSelections[0]\n      textEditor.selections = newSelections\n    })\n  })\n\n  context.subscriptions.push(disposable)\n}\n\nconst processSelection = ({ numCopies, text, selection, newPositions }) => {\n  const numLines = Math.abs(selection.end.line - selection.start.line)\n  const charDiff = numLines === 0 ? Math.abs(selection.end.character - selection.start.character) : 0\n  let str = ''\n  for (let i = 0; i < numCopies; i++) {\n    str += text\n    const linePos = selection.active.line + numLines * i\n    const charPos = selection.active.character + charDiff * i\n    newPositions.push([linePos, charPos])\n  }\n  return str\n}\n\n// this method is called when your extension is deactivated\nconst deactivate = () => { }\n\nmodule.exports = {\n  activate,\n  deactivate,\n  processSelection,\n}\n"],
  "mappings": ";AAAA,IAAM,SAAS,QAAQ,QAAQ;AAG/B,IAAM,aAAa;AAKnB,IAAM,WAAW,CAAC,YAAY;AAC5B,UAAQ,IAAI,mEAAmE;AAE/E,QAAM,aAAa,OAAO,SAAS,gBAAgB,oCAAoC,MAAM;AAC3F,UAAM,MAAM;AAAA,MACV,aAAa;AAAA,MACb,QAAQ;AAAA,IACV;AACA,UAAM,QAAQ,OAAO,OAAO,aAAa,GAAG;AAC5C,QAAI,CAAC,OAAO;AACV,cAAQ,IAAI,oBAAoB,KAAK,GAAG;AACxC;AAAA,IACF;AAEA,UAAM,KAAK,CAAC,QAAQ;AAGlB,YAAM,YAAY,SAAS,KAAK,EAAE,KAAK;AAGvC,YAAM,eAAe,CAAC;AAEtB,YAAM,aAAa,OAAO,OAAO;AACjC,iBAAW,KAAK,CAAC,YAAY;AAC3B,mBAAW,WAAW,QAAQ,eAAa;AACzC,kBAAQ,IAAI,kBAAkB,KAAK,UAAU,SAAS,CAAC,EAAE;AAEzD,gBAAM,OAAO,WAAW,SAAS,QAAQ,IAAI,OAAO,MAAM,UAAU,OAAO,UAAU,GAAG,CAAC;AACzF,kBAAQ,IAAI,eAAe,KAAK,MAAM,WAAW,IAAI,GAAG;AAExD,cAAK,KAAK,SAAS,YAAa,YAAY;AAC1C,kBAAM,MAAM,sCAAsC,WAAW,SAAS,IAAI,aAAa,UAAU,MAAM,OAAO;AAC9G,mBAAO,OAAO,iBAAiB,GAAG;AAClC;AAAA,UACF;AAEA,gBAAM,MAAM,iBAAiB,EAAE,WAAW,MAAM,WAAW,aAAa,CAAC;AAGzE,kBAAQ,QAAQ,WAAW,GAAG;AAAA,QAChC,CAAC;AAAA,MACH,CAAC;AAED,YAAM,gBAAgB,CAAC;AACvB,mBAAa,QAAQ,CAAC,MAAM;AAC1B,cAAM,iBAAiB,IAAI,OAAO,SAAS,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AACrD,gBAAQ,IAAI,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,uBAAuB,KAAK,UAAU,cAAc,CAAC,EAAE;AACxF,cAAM,eAAe,IAAI,OAAO,UAAU,gBAAgB,cAAc;AACxE,gBAAQ,IAAI,qBAAqB,KAAK,UAAU,YAAY,CAAC,EAAE;AAC/D,sBAAc,KAAK,YAAY;AAAA,MACjC,CAAC;AAED,iBAAW,YAAY,cAAc,CAAC;AACtC,iBAAW,aAAa;AAAA,IAC1B,CAAC;AAAA,EACH,CAAC;AAED,UAAQ,cAAc,KAAK,UAAU;AACvC;AAEA,IAAM,mBAAmB,CAAC,EAAE,WAAW,MAAM,WAAW,aAAa,MAAM;AACzE,QAAM,WAAW,KAAK,IAAI,UAAU,IAAI,OAAO,UAAU,MAAM,IAAI;AACnE,QAAM,WAAW,aAAa,IAAI,KAAK,IAAI,UAAU,IAAI,YAAY,UAAU,MAAM,SAAS,IAAI;AAClG,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,WAAO;AACP,UAAM,UAAU,UAAU,OAAO,OAAO,WAAW;AACnD,UAAM,UAAU,UAAU,OAAO,YAAY,WAAW;AACxD,iBAAa,KAAK,CAAC,SAAS,OAAO,CAAC;AAAA,EACtC;AACA,SAAO;AACT;AAGA,IAAM,aAAa,MAAM;AAAE;AAE3B,OAAO,UAAU;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACF;",
  "names": []
}
